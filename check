#!/bin/sh
#
# Run test suite for morph.
#
# Copyright (C) 2011-2013  Codethink Limited
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


set -e


# Parse the command line.

full=false
while [ "$#" -gt 0 ]
do
    case "$1" in
        --full) full=true; shift ;;
        *) echo "ERROR: Unknown argument $1." 1>&2; exit 1 ;;
    esac
done


# Set PYTHONPATH to start with the current directory so that we always
# find the right version of it for the test suite.

case "$PYTHONPATH" in
    '') PYTHONPATH="$(pwd)" ;;
    *) PYTHONPATH="$(pwd):$PYTHONPATH" ;;
esac
export PYTHONPATH


# Clean up artifacts from previous (possibly failed) runs, build,
# and run the tests.

python setup.py clean check

HOME="$(pwd)/scripts"

cmdtest tests

if $full
then
    cmdtest tests.branching
else
    echo "NOT RUNNING test.branching"
fi

if $full
then
    cmdtest tests.merging
else
    echo "NOT RUNNING test.merging"
fi

cmdtest tests.deploy

# Building systems requires the 'filter' parameter of tarfile.TarFile.add():
# this was introduced in Python 2.7
if python --version 2>&1 | grep '^Python 2\.[78]' > /dev/null; then
    cmdtest tests.build
else
    echo "NOT RUNNING tests.build (requires Python 2.7)"
fi

# The as-root tests use YAML morphologies, so they require the PyYAML module.
if $full && [ $(whoami) = root ] && command -v mkfs.btrfs > /dev/null &&
    python -c "
import morphlib, sys
if not morphlib.got_yaml:
    sys.exit(1)
" > /dev/null 2>&1
then
    cmdtest tests.as-root
else
    echo "NOT RUNNING tests.as-root (requires PyYAML)"
fi

if [ -d .git ];
then
    echo "Checking copyright statements"
    git ls-files | xargs scripts/check-copyright-year
    
    echo 'Checking source code for silliness'
    git ls-files |
    grep -v '\.gz$' |
    grep -Ev 'tests[^/]*/.*\.std(out|err)' |
    grep -vF 'tests.build/build-system-autotools.script' |
    while read x
    do
        if tr -cd '\t' < "$x" | grep . > /dev/null
        then
            echo "ERROR: $x contains TAB characters" 1>&2
            grep -n -F "$(printf "\t")" "$x" 1>&2
            errors=1
        fi

        case "$x" in
            *)
                if awk 'length > 79' "$x" | grep . > /dev/null
                then
                    echo "ERROR: $x has lines longer than 79 chars" 1>&2
                    awk 'length > 79 { print NR, $0 }' "$x" 1>&2
                    errors=1
                fi
                ;;
        esac

        case "$x" in
            *.py)
                if head -1 "$x" | grep '^#!' > /dev/null
                then
                    echo "ERROR: $x has a hashbang" 1>&2
                    errors=1
                fi
                if grep except: "$x"
                then
                    echo "ERROR: $x has a bare except:" 1>&2
                    errors=1
                fi
                ;;
        esac
    done
fi
exit $errors

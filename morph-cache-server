#!/usr/bin/env python
#
# Copyright (C) 2012  Codethink Limited
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import cliapp
import logging
import os
import urllib

from bottle import Bottle, request, response, run, static_file

from morphcacheserver.repocache import RepoCache


defaults = {
    'repo-dir': '/var/cache/morph-cache-server/gits',
    'bundle-dir': '/var/cache/morph-cache-server/bundles',
    'artifact-dir': '/var/cache/morph-cache-server/artifacts',
    'port': 8080,
}


class MorphCacheServer(cliapp.Application):

    def add_settings(self):
        self.settings.integer(['port'],
                              'port to listen on',
                              metavar='PORTNUM',
                              default=defaults['port'])
        self.settings.string(['repo-dir'],
                             'path to the repository cache directory',
                             metavar='PATH',
                             default=defaults['repo-dir'])
        self.settings.string(['bundle-dir'],
                             'path to the bundle cache directory',
                             metavar='PATH',
                             default=defaults['bundle-dir'])
        self.settings.string(['artifact-dir'],
                             'path to the artifact cache directory',
                             metavar='PATH',
                             default=defaults['artifact-dir'])
        self.settings.boolean(['direct-mode'],
                              'cache directories are directly managed')
        self.settings.boolean(['enable-writes'],
                              'enable the write methods (fetch and delete)')

    def process_args(self, args):
        app = Bottle()

        repo_cache = RepoCache(self,
                               self.settings['repo-dir'],
                               self.settings['bundle-dir'],
                               self.settings['direct-mode'])

        def writable(prefix):
            """Selectively enable bottle prefixes.

            prefix -- The path prefix we are enabling

            If the runtime configuration setting --enable-writes is provided
            then we return the app.get() decorator for the given path prefix
            otherwise we return a lambda which passes the function through
            undecorated.

            This has the effect of being a runtime-enablable @app.get(...)

            """
            if self.settings['enable-writes']:
                return app.get(prefix)
            return lambda fn: fn

        @writable('/list')
        def list():
            response.set_header('Cache-Control', 'no-cache')
            results = {}
            files = {}
            results["files"] = files
            for artifactdir, __, filenames in \
                    os.walk(self.settings['artifact-dir']):
                fsstinfo = os.statvfs(artifactdir)
                results["freespace"] = fsstinfo.f_bsize * fsstinfo.f_bavail
                for fname in filenames:
                    try:
                        stinfo = os.stat("%s/%s" % (artifactdir, fname))
                        files[fname] = {
                            "atime": stinfo.st_atime,
                            "size": stinfo.st_size,
                            "used": stinfo.st_blocks * 512,
                            }
                    except Exception, e:
                        print(e)
            return results

        @app.get('/sha1s')
        def sha1():
            repo = self._unescape_parameter(request.query.repo)
            ref = self._unescape_parameter(request.query.ref)
            try:
                response.set_header('Cache-Control', 'no-cache')
                sha1, tree = repo_cache.resolve_ref(repo, ref)
                return {
                    'repo': '%s' % repo,
                    'ref': '%s' % ref,
                    'sha1': '%s' % sha1,
                    'tree': '%s' % tree
                }
            except Exception, e:
                response.status = 404
                logging.debug('%s' % e)
        
        @app.get('/files')
        def file():
            repo = self._unescape_parameter(request.query.repo)
            ref = self._unescape_parameter(request.query.ref)
            filename = self._unescape_parameter(request.query.filename)
            try:
                content = repo_cache.cat_file(repo, ref, filename)
                response.set_header('Content-Type', 'application/octet-stream')
                return content
            except Exception, e:
                response.status = 404
                logging.debug('%s' % e)

        @app.get('/trees')
        def tree():
            repo = self._unescape_parameter(request.query.repo)
            ref = self._unescape_parameter(request.query.ref)
            path = self._unescape_parameter(request.query.path)
            try:
                tree = repo_cache.ls_tree(repo, ref, path)
                return {
                    'repo': '%s' % repo,
                    'ref': '%s' % ref,
                    'tree': tree,
                }
            except Exception, e:
                response.status = 404
                logging.debug('%s' % e)

        @app.get('/bundles')
        def bundle():
            repo = self._unescape_parameter(request.query.repo)
            filename = repo_cache.get_bundle_filename(repo)
            dirname = os.path.dirname(filename)
            basename = os.path.basename(filename)
            return static_file(basename, root=dirname, download=True)

        @app.get('/artifacts')
        def artifact():
            basename = self._unescape_parameter(request.query.filename)
            filename = os.path.join(self.settings['artifact-dir'], basename)
            if os.path.exists(filename):
                return static_file(basename,
                                   root=self.settings['artifact-dir'],
                                   download=True)
            else:
                response.status = 404
                logging.debug('artifact %s does not exist' % basename)
        
        root = Bottle()
        root.mount(app, '/1.0')
        
        run(root, host='0.0.0.0', port=self.settings['port'], reloader=True)

    def _unescape_parameter(self, param):
        return urllib.unquote(param)


if __name__ == '__main__':
    MorphCacheServer().run()

#!/bin/bash

set -e
set +h
set -u

BASEDIR=$(dirname $(readlink -f $0))

LFS="$(pwd)/tree"
tools="$LFS/tools"

buildwhat="$1"

export LC_ALL=C

if (uname -m | grep arm) >/dev/null; then
    export LFS_TGT=$(uname -m)-lfs-linux-gnueabi
else
    export LFS_TGT=$(uname -m)-lfs-linux-gnu
fi

HOST_CAT=`which cat`
HOST_CP=`which cp`
HOST_MKDIR=`which mkdir`
HOST_CHMOD=`which chmod`

export CCACHE_DIR="/var/tmp/ccache"
export PATH="$tools/lib/ccache:$tools/bin:$tools/sbin:/usr/lib/ccache:/usr/bin:/bin"

pass1_directories()
{
    $HOST_MKDIR -p "$LFS"

    $HOST_MKDIR -p "$tools"
    $HOST_MKDIR -p "$tools/bin"
    $HOST_MKDIR -p "$tools/lib"
    [ -h "$tools/sbin" ] || ln -sf "bin" "$tools/sbin"
    [ -h "$tools/lib64" ] || ln -sf "lib" "$tools/lib64"
    [ -h "$tools/libexec" ] || ln -sf "lib" "$tools/libexec"

    [ -e "$LFS/proc" ] || $HOST_MKDIR -p "$LFS/proc"
    [ -e "$LFS/sys" ] || $HOST_MKDIR -p "$LFS/sys"
    [ -e "$LFS/tmp" ] || $HOST_MKDIR -p "$LFS/tmp"
    [ -e "$LFS/dev" ] || $HOST_MKDIR -p "$LFS/dev"
    [ -e "$LFS/dev/console" ] || \
        mknod -m 600 "$LFS/dev/console" c 5 1
    [ -e "$LFS/dev/null" ] || mknod -m 666 "$LFS/dev/null" c 1 3
    [ -e "$LFS/dev/random" ] || mknod -m 644 "$LFS/dev/random" c 1 8
    [ -e "$LFS/dev/urandom" ] || \
        mknod -m 644 "$LFS/dev/urandom" c 1 9
}

pass1_ccache()
{
    echo "Building ccache"
    if [ ! -e "$tools/bin/ccache" ]
    then
        unpack ccache-3.1.7
        cd "$sources/ccache-3.1.7"
        ./configure --prefix="$tools"
        make -j1
        make install

        mkdir "$tools/lib/ccache"
        for name in cc c++ gcc gcc-4.6.1 g++ g++-4.6.1; do
            ln -s "$tools/bin/ccache" "$tools/lib/ccache/$name"
            ln -s "$tools/bin/ccache" "$tools/lib/ccache/$LFS_TGT-$name"
        done

        rm -rf "$sources/ccache-3.1.7"
    fi
}

pass1_get_sources_with_morph()
{
    cd $LFS/baserock/gits/morph
    $HOST_MKDIR -p $LFS/baserock/cache
    export PATH="/usr/bin:/bin:$tools/bin:$tools/sbin"
    while ! python ./morph --verbose update-gits \
        morphs rm/morph-pass1 bootstrap-pass1.morph \
        --cachedir=$LFS/baserock/cache \
        --log=$LFS/baserock/morph.log \
        --dump-memory-profile=none \
        --keep-path \
        --bundle-server="$GIT_BUNDLES"
    do
        echo eeekk try again
    done
}

pass1_build_with_morph()
{
    cd $LFS/baserock/gits/morph
    $HOST_MKDIR -p $LFS/baserock/cache
    $HOST_MKDIR -p $LFS/tmp
    export PATH="/usr/bin:/bin:$tools/bin:$tools/sbin"
    python ./morph --verbose build \
        morphs rm/morph-pass1 bootstrap-pass1.morph \
        --no-git-update \
        --no-distcc \
        --bootstrap \
        --cachedir=$LFS/baserock/cache \
        --tempdir=$LFS/tmp \
        --log=$LFS/baserock/morph.log \
        --dump-memory-profile=none \
        --keep-path \
        --prefix="$tools" \
        --toolchain-target="$LFS_TGT"
}

pass2_get_morph()
{
    echo "Get morph"
    if [ ! -e "$LFS/baserock/gits" ]
    then
        $HOST_MKDIR -p "$LFS/baserock/gits"
        cp -al "$HOME/baserock/gits/morph" "$LFS/baserock/gits/morph"
    fi
}


pass2_prepare_for_chroot()
{
    echo "Preparing $LFS for chroot"
    cd "$LFS"
    if [ ! -h "$LFS/$LFS" ]
    then
        $HOST_MKDIR -p "$LFS/$LFS"
        /bin/rmdir "$LFS/$LFS"
        /bin/ln -s / "$LFS/$LFS"
    fi

    if [ ! -d "$LFS/etc" ]
    then
        mkdir -p "$LFS/etc"
        chmod 777 "$LFS/etc"
        touch "$LFS/etc/ld.so.conf"
        chmod 666 "$LFS/etc/ld.so.conf"
        cat <<EOF > "$LFS/etc/ld.so.conf"
/lib64
/lib
/usr/lib64
/usr/lib
EOF
    fi
    
#    $HOST_MKDIR -p "$LFS/etc"
    [ -e "$LFS/etc/passwd" ] || \
        echo 'root::0:0:root:/root:/bin/bash' > "$LFS/etc/passwd"
    [ -e "$LFS/etc/group" ] || echo 'root::0:' > "$LFS/etc/group"

#    [ -e "$LFS/etc/hostname" ] || echo 'baserock-boot' | 
#        /usr/bin/tee "$LFS/etc/hostname" > /dev/null

    # Add symlinks for common locations of specific tools
    # These are needed for #! lines in scripts
    [ -e "$LFS/bin" ] || $HOST_MKDIR -p "$LFS/bin"
    [ -e "$LFS/bin/sh" ] || ln -sf ../tools/bin/bash "$LFS/bin/sh"
    [ -e "$LFS/bin/bash" ] || \
        ln -sf ../tools/bin/bash "$LFS/bin/bash"
    [ -e "$LFS/bin/pwd" ] || ln -sf ../tools/bin/pwd "$LFS/bin/pwd"
    [ -e "$LFS/bin/echo" ] || \
        ln -sf ../tools/bin/echo "$LFS/bin/echo"
    if [ ! -e "$LFS/usr/bin/perl" ]; then
        $HOST_MKDIR -p $LFS/usr/bin
        ln -sf ../../tools/bin/perl "$LFS/usr/bin/perl"
    fi
}


pass2_get_sources_with_morph_in_chroot()
{
    echo "Getting sources with morph"
    cat <<EOF > "$LFS/baserock/build.sh"
#!/tools/bin/bash
set -e
set -x

cd /baserock/gits/morph
mkdir -p /baserock/cache
export PATH="/usr/bin:/bin:$tools/bin:$tools/sbin"
while ! python ./morph --verbose update-gits \
    morphs master foundation.morph \
    morphs master devel-bootstrap.morph \
    morphs master linux-stratum.morph \
        --bootstrap \
        --cachedir=/baserock/cache \
        --log=/baserock/morph.log \
        --dump-memory-profile=none \
        --keep-path \
        --bundle-server="$GIT_BUNDLES"
do
    echo eeekk try again
done
EOF
    $HOST_CHMOD +x "$LFS/baserock/build.sh"
    local do_chroot="$BASEDIR/do-chroot.bash"
    $HOST_CAT <<EOF >"$do_chroot"
#!/bin/bash
trap "umount $LFS/proc $LFS/sys" INT TERM EXIT
set -e
set -x
if ! mount | grep "$LFS/proc" >/dev/null
then
    mount -t proc proc "$LFS/proc"
fi
if ! mount | grep "$LFS/sys" >/dev/null
then
    mount -t sysfs sysfs "$LFS/sys"
fi
$HOST_CP -f /etc/resolv.conf "$LFS/etc/resolv.conf"
/usr/sbin/chroot "$LFS" \\
    /tools/bin/env -i HOME=/baserock TERM=\$TERM \\
    PATH="/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin" \\
    BOOTSTRAP_TOOLS="$LFS/tools" \\
    "\${@-\$SHELL}"
EOF
    $HOST_CHMOD +x "$do_chroot"
    "$do_chroot" /baserock/build.sh
}


pass2_build_with_morph_in_chroot()
{
    echo "Building Baserock with morph"
    cat <<EOF > "$LFS/baserock/build.sh"
#!/tools/bin/bash
set -e
set -x

cd /baserock/gits/morph
mkdir -p /baserock/cache
export PATH="/usr/bin:/bin:$tools/bin:$tools/sbin"
python ./morph --verbose build \
    morphs master foundation.morph \
    morphs master devel-bootstrap.morph \
    morphs master linux-stratum.morph \
        --bootstrap \
        --no-git-update \
        --cachedir=/baserock/cache \
        --log=/baserock/morph.log \
        --dump-memory-profile=none \
        --keep-path \
        --bundle-server="$GIT_BUNDLES"
EOF
    $HOST_CHMOD +x "$LFS/baserock/build.sh"
    local do_chroot="$BASEDIR/do-chroot.bash"
    $HOST_CAT <<EOF >"$do_chroot"
#!/bin/bash
trap "umount $LFS/proc $LFS/sys" INT TERM EXIT
set -e
set -x
if ! mount | grep "$LFS/proc" >/dev/null
then
    mount -t proc proc "$LFS/proc"
fi
if ! mount | grep "$LFS/sys" >/dev/null
then
    mount -t sysfs sysfs "$LFS/sys"
fi
$HOST_CP -f /etc/resolv.conf "$LFS/etc/resolv.conf"
/usr/sbin/chroot "$LFS" \\
    /tools/bin/env -i HOME=/baserock TERM=\$TERM \\
    PATH="/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin" \\
    BOOTSTRAP_TOOLS="$LFS/tools" \\
    "\${@-\$SHELL}"
EOF
    $HOST_CHMOD +x "$do_chroot"
    "$do_chroot" /baserock/build.sh
}

pass2a_cleanup_at_end()
{
    echo "Remove unnecessary stuff at the end of pass2a"
    rm -f "$LFS/baserock/cache/gits/"*.bndl
}


pass2b_cleanup_at_end()
{
    echo "Remove unnecessary stuff at the end of pass2b"
    rm -rf "$LFS/tools"
    rm -f "$LFS"/baserock/cache/*.chunk.*
}


pass3_remove_tools()
{
    echo "Removing $LFS/tools"
    rm -rf "$LFS/tools"
}

pass3_get_sources_with_morph_in_chroot()
{
    echo "Getting sources with morph"

    # use pass 2 sources as a starting point
    # but the cached chunks may be invalid, so
    # move them away 
    cd "$LFS/baserock/gits/morph"
    if [ ! -e "$LFS/baserock/cache.pass2" ]; then
        mv "$LFS/baserock/cache" "$LFS/baserock/cache.pass2"
        mkdir -p "$LFS/baserock/cache"
        mv "$LFS/baserock/cache.pass2/gits" "$LFS/baserock/cache/gits"
    fi

    cat <<EOF > "$LFS/baserock/build.sh"
#!/bin/bash
set -e
set -x

cd /baserock/gits/morph
while ! python ./morph --verbose update-gits \
    morphs master foundation.morph \
    morphs master devel.morph \
    morphs master linux-stratum.morph \
        --cachedir=/baserock/cache \
        --log=/baserock/morph.log \
        --dump-memory-profile=none \
        --keep-path \
        --bundle-server="$GIT_BUNDLES"
do
    echo eeekk try again
done
EOF
    $HOST_CHMOD +x "$LFS/baserock/build.sh"
    local do_chroot="$BASEDIR/do-chroot.bash"
    $HOST_CAT <<EOF >"$do_chroot"
#!/bin/bash
trap "umount $LFS/proc $LFS/sys" INT TERM EXIT
set -e
set -x
if ! mount | grep "$LFS/proc" >/dev/null
then
    mount -t proc proc "$LFS/proc"
fi
if ! mount | grep "$LFS/sys" >/dev/null
then
    mount -t sysfs sysfs "$LFS/sys"
fi
$HOST_CP -f /etc/resolv.conf "$LFS/etc/resolv.conf"
/usr/sbin/chroot "$LFS" \\
    /usr/bin/env -i HOME=/baserock TERM=\$TERM \\
    PATH="/bin:/usr/bin:/sbin:/usr/sbin" \\
    "\${@-\$SHELL}"
EOF
    $HOST_CHMOD +x "$do_chroot"
    "$do_chroot" /baserock/build.sh
}
pass3_build_with_morph_in_chroot()
{
    echo "Building Baserock with morph"

    cat <<EOF > "$LFS/baserock/build_pass3.sh"
#!/bin/bash
set -e
set -x

export PATH="/usr/bin:/bin"
cd /baserock/gits/morph
python ./morph --verbose build \
    morphs master foundation.morph \
    morphs master devel.morph \
    morphs master linux-stratum.morph \
        --staging-chroot \
        $(for x in $LFS/baserock/cache.pass2/*.stratum.*;  \
            do echo -n "--staging-filler=\"$x\" "; done) \
        --no-git-update \
        --cachedir=/baserock/cache \
        --log=/baserock/morph.log \
        --dump-memory-profile=none \
        --keep-path \
        --bundle-server="$GIT_BUNDLES"
EOF
    $HOST_CHMOD +x "$LFS/baserock/build_pass3.sh"
    local do_chroot="$BASEDIR/do-chroot.bash"
    $HOST_CAT >"$do_chroot" <<EOF
#!/bin/bash
trap "umount $LFS/proc $LFS/sys" INT TERM EXIT
set -e
set -x
if ! mount | grep "$LFS/proc" >/dev/null
then
    mount -t proc proc "$LFS/proc"
fi
if ! mount | grep "$LFS/sys" >/dev/null
then
    mount -t sysfs sysfs "$LFS/sys"
fi
$HOST_CP -f /etc/resolv.conf "$LFS/etc/resolv.conf"
/usr/sbin/chroot "$LFS" \\
    /usr/bin/env -i HOME=/baserock TERM=\$TERM \\
    PATH="/bin:/usr/bin:/sbin:/usr/sbin" \\
    "\${@-\$SHELL}"
EOF
    $HOST_CHMOD +x "$do_chroot"
    "$do_chroot" /baserock/build_pass3.sh
}

echo "Bootstrapping Baserock development environment"
echo "LFS_TGT=$LFS_TGT"

time pass1_directories

case "$buildwhat" in
    pass1a)
        time pass1_get_sources_with_morph
        ;;
    pass1b)
        time pass1_build_with_morph
        ;;
    pass2a)
        time pass2_get_morph
        time pass2_prepare_for_chroot
        time pass2_get_sources_with_morph_in_chroot
        time pass2a_cleanup_at_end
        ;;
    pass2b)
        time pass2_build_with_morph_in_chroot
        time pass2b_cleanup_at_end
        ;;
    pass3a)
        time pass3_remove_tools
        time pass3_get_sources_with_morph_in_chroot
        ;;
    pass3b)
        time pass3_build_with_morph_in_chroot
        ;;
    *)  echo "Usage! (sorry, I'm unhelpful)" 1>&2
        exit 1
        ;;
esac

echo "$buildwhat finished OK"

